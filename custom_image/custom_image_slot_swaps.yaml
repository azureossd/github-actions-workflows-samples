# Docs for the Azure Web Apps Deploy action: https://github.com/Azure/webapps-deploy
# More GitHub Actions for Azure: https://github.com/Azure/actions

name: Linux Container Workflow

on: [push]

env:
  AZURE_RESOURCE_GROUP: yourresourcegroupname
  WEB_APP_NAME: yourwebappname

jobs:
  build:
    runs-on: ubuntu-latest

    steps:
    - uses: actions/checkout@v2
    - uses: azure/docker-login@v1
      with:
        login-server: yourcontainerregistry.azurecr.io
        username: ${{ secrets.REGISTRY_USERNAME }}
        password: ${{ secrets.REGISTRY_PASSWORD }}
    - run: |
        docker build . -t yourcontainerregistry.azurecr.io/yourwebappname:${{ github.sha }}
        docker push yourcontainerregistry.azurecr.io/yourwebappname:${{ github.sha }}

  deploy:
    runs-on: ubuntu-latest
    needs: build
    environment:
      name: 'Production'
      url: ${{ steps.deploy-to-webapp.outputs.webapp-url }}

    steps:
      - name: Login for az cli commands 
        uses: azure/login@v1
        with:
          # AZURE_CREDENTIALS is the json output of az ad sp create
          # Which is ran to create the Service Principal prior to this 
          # For more information see: https://github.com/Azure-Samples/dotnetcore-containerized-sqldb-ghactions#2-create-a-service-principal-to-manage-your-resource-group-from-github-actions
          creds: ${{ secrets.AZURE_CREDENTIALS }}

      - name: 'Deploy to Azure Web App'
        uses: azure/webapps-deploy@v2
        with:
          app-name: 'yourwebappname'
          publish-profile: ${{ secrets.AZUREAPPSERVICE_PUBLISHPROFILE_96A786AF29204F989FAA2469FCD8089C }}
          images: 'yourcontainerregistry.azurecr.io/yourwebappname:${{ github.sha }}'
          slot-name: staging

      - name: Swap to production slot
        run: |
          az webapp deployment slot swap --resource-group ${{ env.AZURE_RESOURCE_GROUP }} --name ${{ env.WEB_APP_NAME }} --slot staging --target-slot production
          echo "Swap finished. WebApp accessible at https://$(az webapp show --resource-group ${{ env.AZURE_RESOURCE_GROUP }} --name ${{ env.WEB_APP_NAME }} --query hostNames[0] -o tsv)"
